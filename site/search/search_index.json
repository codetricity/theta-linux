{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RICOH THETA Development on Linux Overview Stream 360 video, control the RICOH THETA API, and supply power to the camera using the USB cable. It's awesome! Video to your Linux computer is 4K at 30fps with under 30ms latency. Works with the RICOH THETA V or RICOH THETA Z1. It's perfect for OpenCV object detection, autonomous drones, building analysis, AI, and TensorFlow projects. The camera can be powered from the USB cable and can switch into live streaming mode, still image, video, or bracket shooting using API commands. We explain the tools, the repos, and the API. Up to date guides, events, and a general pile of great stuff is at the theta360.guide Linux Streaming Site . It's an exciting world. Let's getting started.","title":"Home"},{"location":"#ricoh-theta-development-on-linux","text":"","title":"RICOH THETA Development on Linux"},{"location":"#overview","text":"Stream 360 video, control the RICOH THETA API, and supply power to the camera using the USB cable. It's awesome! Video to your Linux computer is 4K at 30fps with under 30ms latency. Works with the RICOH THETA V or RICOH THETA Z1. It's perfect for OpenCV object detection, autonomous drones, building analysis, AI, and TensorFlow projects. The camera can be powered from the USB cable and can switch into live streaming mode, still image, video, or bracket shooting using API commands. We explain the tools, the repos, and the API. Up to date guides, events, and a general pile of great stuff is at the theta360.guide Linux Streaming Site . It's an exciting world. Let's getting started.","title":"Overview"},{"location":"demos/","text":"Ongoing Tests with Linux Streaming Using Nvidia Jetson Nano live streaming from a THETA V. Processing done with Python3, OpenCV 4.4. DetectNet DetectNet first applied to single frame with SSD Mobilenet-v2. This is not from a live stream at the moment. Maybe it will be before the meetup. :-) See Jetson Nano inference benchmarks . Code is available in the at https://github.com/dusty-nv/jetson-inference There is super small text in the green box that says, \"person\". The system accurately detected the only person in the image. It is 88.6 percent confident that I am a person. Nice. Despite the distorted view of my feet, the program does detect the human form. Even at night, in low-light conditions with me on the side of the shutter button, the program did detect me. However, there were many frames where I was not detected. To proceed, you will likely need a database of fisheye or equirectangular images to build your own model. OpenCV Python Works on live stream. Procedure install libuvc-theta install libuv-theta-sample install v4l2loopback load kernel modules for v4l2loopback and verify that /dev/video0 or equivalent shows THETA stream run Python script with cv2 Recommend you recompile OpenCV 4.4 from source code. May take 2.5 hours if you compile on the Nano. Frame resize test. import cv2 cap = cv2.VideoCapture(0) # Check if the webcam is opened correctly if not cap.isOpened(): raise IOError(\"Cannot open webcam\") while True: ret, frame = cap.read() frame = cv2.resize(frame, None, fx=0.25, fy=0.25, interpolation=cv2.INTER_AREA) cv2.imshow('Input', frame) c = cv2.waitKey(1) if c == 27: break cap.release() cv2.destroyAllWindows() One script to install OpenCV 4.3 is from AastaNV here . The script I used is from mdegans here Code for OpenCV Demo with Canny from RICOH THETA V . OpenPose Works on live stream with Jetpack 4.3, not 4.4.","title":"Demos"},{"location":"demos/#ongoing-tests-with-linux-streaming","text":"Using Nvidia Jetson Nano live streaming from a THETA V. Processing done with Python3, OpenCV 4.4.","title":"Ongoing Tests with Linux Streaming"},{"location":"demos/#detectnet","text":"DetectNet first applied to single frame with SSD Mobilenet-v2. This is not from a live stream at the moment. Maybe it will be before the meetup. :-) See Jetson Nano inference benchmarks . Code is available in the at https://github.com/dusty-nv/jetson-inference There is super small text in the green box that says, \"person\". The system accurately detected the only person in the image. It is 88.6 percent confident that I am a person. Nice. Despite the distorted view of my feet, the program does detect the human form. Even at night, in low-light conditions with me on the side of the shutter button, the program did detect me. However, there were many frames where I was not detected. To proceed, you will likely need a database of fisheye or equirectangular images to build your own model.","title":"DetectNet"},{"location":"demos/#opencv-python","text":"Works on live stream.","title":"OpenCV Python"},{"location":"demos/#procedure","text":"install libuvc-theta install libuv-theta-sample install v4l2loopback load kernel modules for v4l2loopback and verify that /dev/video0 or equivalent shows THETA stream run Python script with cv2 Recommend you recompile OpenCV 4.4 from source code. May take 2.5 hours if you compile on the Nano. Frame resize test. import cv2 cap = cv2.VideoCapture(0) # Check if the webcam is opened correctly if not cap.isOpened(): raise IOError(\"Cannot open webcam\") while True: ret, frame = cap.read() frame = cv2.resize(frame, None, fx=0.25, fy=0.25, interpolation=cv2.INTER_AREA) cv2.imshow('Input', frame) c = cv2.waitKey(1) if c == 27: break cap.release() cv2.destroyAllWindows() One script to install OpenCV 4.3 is from AastaNV here . The script I used is from mdegans here Code for OpenCV Demo with Canny from RICOH THETA V .","title":"Procedure"},{"location":"demos/#openpose","text":"Works on live stream with Jetpack 4.3, not 4.4.","title":"OpenPose"},{"location":"equipment/","text":"Hardware Requirements for Linux and the RICOH THETA Jetson Nano - Reference Platform Our reference platform is the NVIDIA Jetson Nano running JetPack 4.4, which is Ubuntu 18.04. The Nano is an ARM A57 with a 128-core Maxwell GPU, 4GB 64-bit LPDDR4. The nano is powered by a 5V 4A barrel connector, not the microUSB which is 5V 2A. Our Nano has an external fan on the PWM header and a 64GB microSD card. x86 Linux We've also tested the libuvc-theta (streaming) and libuvc-theta-sample (streaming sample application) on x86 64bit Linux using Ubuntu 20.04 LTS, Focal Fossa. Please note these limitations: It is easier if you don't use a dedicated graphics card on x86. In our tests on Ubuntu 20, Focal Fossa, the gstreamer vaapi plugin can't use the hardware decoder on the NVIDIA GPU with the proprietary NVIDIA driver. The causes gstreamer to use a software decoder instead. This will likely cause many frame drops on your system. You can verify this by setting the GST_DEBUG environment variable to 2 or 3 and then running gst_loopback. You will likely see many frame drop messages. There are two possible workarounds: Use the nvdec plugin Although the nvdec plugin is a part of the gstreamer-plugins-bad, it is not included in binary distribution due to license problem. Thus, you have to build the plugin by yourself. You also need to modify the pipeline of the gst_loopback accordingly. Use hardware decoder on the iGPU You may need additional setup to run X server on the iGPU, Raspberry Pi The Raspberry Pi will work great with the USB API. However, you will not have a good experience streaming 4K, even with the Raspberry Pi 4. The Raspberry Pi's H.264 hardware decoder does not support 4K resolution even on the Raspberry Pi4. In addition, older Pis' (Pi to Pi3) memory bandwidth(32bit DDR2) is too poor to handle even FHD stream from THETA V/Z1. NVIDIA Jetson Xavier On Jetson Xavier, auto plugin selection of the gstreamer seems to be not working well, replacing \"decodebin ! autovideosink sync=false\" to \"nvv4l2decoder ! nv3dsink sync=false\" will solve the problem. Edit this line in the sample code and recompile.","title":"Equipment"},{"location":"equipment/#hardware-requirements-for-linux-and-the-ricoh-theta","text":"","title":"Hardware Requirements for Linux and the RICOH THETA"},{"location":"equipment/#jetson-nano-reference-platform","text":"Our reference platform is the NVIDIA Jetson Nano running JetPack 4.4, which is Ubuntu 18.04. The Nano is an ARM A57 with a 128-core Maxwell GPU, 4GB 64-bit LPDDR4. The nano is powered by a 5V 4A barrel connector, not the microUSB which is 5V 2A. Our Nano has an external fan on the PWM header and a 64GB microSD card.","title":"Jetson Nano - Reference Platform"},{"location":"equipment/#x86-linux","text":"We've also tested the libuvc-theta (streaming) and libuvc-theta-sample (streaming sample application) on x86 64bit Linux using Ubuntu 20.04 LTS, Focal Fossa. Please note these limitations: It is easier if you don't use a dedicated graphics card on x86. In our tests on Ubuntu 20, Focal Fossa, the gstreamer vaapi plugin can't use the hardware decoder on the NVIDIA GPU with the proprietary NVIDIA driver. The causes gstreamer to use a software decoder instead. This will likely cause many frame drops on your system. You can verify this by setting the GST_DEBUG environment variable to 2 or 3 and then running gst_loopback. You will likely see many frame drop messages. There are two possible workarounds: Use the nvdec plugin Although the nvdec plugin is a part of the gstreamer-plugins-bad, it is not included in binary distribution due to license problem. Thus, you have to build the plugin by yourself. You also need to modify the pipeline of the gst_loopback accordingly. Use hardware decoder on the iGPU You may need additional setup to run X server on the iGPU,","title":"x86 Linux"},{"location":"equipment/#raspberry-pi","text":"The Raspberry Pi will work great with the USB API. However, you will not have a good experience streaming 4K, even with the Raspberry Pi 4. The Raspberry Pi's H.264 hardware decoder does not support 4K resolution even on the Raspberry Pi4. In addition, older Pis' (Pi to Pi3) memory bandwidth(32bit DDR2) is too poor to handle even FHD stream from THETA V/Z1.","title":"Raspberry Pi"},{"location":"equipment/#nvidia-jetson-xavier","text":"On Jetson Xavier, auto plugin selection of the gstreamer seems to be not working well, replacing \"decodebin ! autovideosink sync=false\" to \"nvv4l2decoder ! nv3dsink sync=false\" will solve the problem. Edit this line in the sample code and recompile.","title":"NVIDIA Jetson Xavier"},{"location":"help/","text":"Getting Help Updated Docs and Events Community discussion - Linux Streaming Community discussion - USB API FAQ Can I stream indefinitely? The THETA Z1 can power off the USB-C port and stream at the same time. Using USB 3.0 or better, the charge increases in our tests. The camera does get hot. Upgrade to the latest firmware. If possible, attach a small fan to your tripod and point it at the body of the THETA. The V drains slowly. It will last about 8 hours. You may be able to bypass the battery, but this is not tested.","title":"Help"},{"location":"help/#getting-help","text":"Updated Docs and Events Community discussion - Linux Streaming Community discussion - USB API","title":"Getting Help"},{"location":"help/#faq","text":"","title":"FAQ"},{"location":"help/#can-i-stream-indefinitely","text":"The THETA Z1 can power off the USB-C port and stream at the same time. Using USB 3.0 or better, the charge increases in our tests. The camera does get hot. Upgrade to the latest firmware. If possible, attach a small fan to your tripod and point it at the body of the THETA. The V drains slowly. It will last about 8 hours. You may be able to bypass the battery, but this is not tested.","title":"Can I stream indefinitely?"},{"location":"software/","text":"Software Requirements Live Streaming You need to download the two GitHub repos below and compile the driver and sample code. libuvc-theta libuvc-theta-sample If you want to use /dev/video0 , you will also need v4l2loopback In addition, there are numerous dependencies to compile the tools listed above. However, have no fear, we will walk you through it. How To Compile and Install Build and install on x86 Ubuntu 20.04 Jetson Nano with OpenCV and VLC on /dev/video0 Compile libuvc-theta on Jetson Nano - silent screencast Build and run v4l2loopback on Jetson Nano . Needed for /dev/video0 USB API libptp - next section for detailed walkthrough","title":"Software"},{"location":"software/#software-requirements","text":"","title":"Software Requirements"},{"location":"software/#live-streaming","text":"You need to download the two GitHub repos below and compile the driver and sample code. libuvc-theta libuvc-theta-sample If you want to use /dev/video0 , you will also need v4l2loopback In addition, there are numerous dependencies to compile the tools listed above. However, have no fear, we will walk you through it.","title":"Live Streaming"},{"location":"software/#how-to-compile-and-install","text":"Build and install on x86 Ubuntu 20.04 Jetson Nano with OpenCV and VLC on /dev/video0 Compile libuvc-theta on Jetson Nano - silent screencast Build and run v4l2loopback on Jetson Nano . Needed for /dev/video0","title":"How To Compile and Install"},{"location":"software/#usb-api","text":"libptp - next section for detailed walkthrough","title":"USB API"},{"location":"usb_api/","text":"USB API with libptp Download libptp source libptp - Picture Transfer Protocol lib Get the newest version, which is 2-1.2 right now. build libptp $ ./configure $ make If you have a build error when compiling libusb, you may need to install the development libraries for libusb. install libusb-dev $ sudo apt install libusb-dev You may not need this step if you already have the libusb development libraries installed. install libptp $ sudo make install set /usr/local/lib in library path The default location of the libptp install is /usr/local/lib . Make sure that this is in your library path. If it isn't, add it to a file such as libc.conf in /etc/ld.so.conf/ . $ cd /etc/ld.so.conf.d/ $ ls $ cat libc.conf run ldconfig Load the library configuration. $ sudo /sbin/ldconfig -v Test ptpcam Connect RICOH THETA to Jetson with a USB cable. Version of 2-1.2 of libptp has a bug in it. Although ptpcam does take pictures and function normally, you will see an error about capture status. Fix problem with libptp response Go to line 77 of ptp.h and change PTP_USB_INT_PACKET_LEN to 28 . After modification, the code will look like this. test ptpcam response again Take a still image picture with ptpcam --capture . Set camera to live streaming mode Check on camera mode. $ ptpcam --show-property=0x5013 Set to live streaming mode. $ ptpcam --set-property=0x5013 --val=0x8005 Using the official RICOH USB API documentation , you can verify that 0x8005 is live streaming mode. The camera LED should show that the THETA is in LIVE mode. In our tests, the RICOH THETA Z1 could charge while streaming over a USB 3.0 port (blue insert). After hours of streaming, the Z1 LED looks like this. The response codes are shown below. 0x0001 = single-shot shooting 0x0003 = Interval shooting 0x8002 = Movie shooting 0x8003 = Interval composite shooting 0x8004 = Multi bracket shooting 0x8005 = Live streaming 0x8006 = Interval shooting - tripod stabilizatio is off (top/bottom correction and stitching optimized) 0x8007 = Interval shooting - tripod stabilization is on If you set the camera back to still image, single shot mode, you will see this response. $ ptpcam --set-property=0x5013 --val=0x0001 Camera: RICOH THETA V 'Still Capture Mode' is set to: 0x8005 (-32763) Changing property value to 0x0001 [(null)] succeeded.","title":"USB API"},{"location":"usb_api/#usb-api-with-libptp","text":"","title":"USB API with libptp"},{"location":"usb_api/#download-libptp-source","text":"libptp - Picture Transfer Protocol lib Get the newest version, which is 2-1.2 right now.","title":"Download libptp source"},{"location":"usb_api/#build-libptp","text":"$ ./configure $ make If you have a build error when compiling libusb, you may need to install the development libraries for libusb.","title":"build libptp"},{"location":"usb_api/#install-libusb-dev","text":"$ sudo apt install libusb-dev You may not need this step if you already have the libusb development libraries installed.","title":"install libusb-dev"},{"location":"usb_api/#install-libptp","text":"$ sudo make install","title":"install libptp"},{"location":"usb_api/#set-usrlocallib-in-library-path","text":"The default location of the libptp install is /usr/local/lib . Make sure that this is in your library path. If it isn't, add it to a file such as libc.conf in /etc/ld.so.conf/ . $ cd /etc/ld.so.conf.d/ $ ls $ cat libc.conf","title":"set /usr/local/lib in library path"},{"location":"usb_api/#run-ldconfig","text":"Load the library configuration. $ sudo /sbin/ldconfig -v","title":"run ldconfig"},{"location":"usb_api/#test-ptpcam","text":"Connect RICOH THETA to Jetson with a USB cable. Version of 2-1.2 of libptp has a bug in it. Although ptpcam does take pictures and function normally, you will see an error about capture status.","title":"Test ptpcam"},{"location":"usb_api/#fix-problem-with-libptp-response","text":"Go to line 77 of ptp.h and change PTP_USB_INT_PACKET_LEN to 28 . After modification, the code will look like this.","title":"Fix problem with libptp response"},{"location":"usb_api/#test-ptpcam-response-again","text":"Take a still image picture with ptpcam --capture .","title":"test ptpcam response again"},{"location":"usb_api/#set-camera-to-live-streaming-mode","text":"Check on camera mode. $ ptpcam --show-property=0x5013 Set to live streaming mode. $ ptpcam --set-property=0x5013 --val=0x8005 Using the official RICOH USB API documentation , you can verify that 0x8005 is live streaming mode. The camera LED should show that the THETA is in LIVE mode. In our tests, the RICOH THETA Z1 could charge while streaming over a USB 3.0 port (blue insert). After hours of streaming, the Z1 LED looks like this. The response codes are shown below. 0x0001 = single-shot shooting 0x0003 = Interval shooting 0x8002 = Movie shooting 0x8003 = Interval composite shooting 0x8004 = Multi bracket shooting 0x8005 = Live streaming 0x8006 = Interval shooting - tripod stabilizatio is off (top/bottom correction and stitching optimized) 0x8007 = Interval shooting - tripod stabilization is on If you set the camera back to still image, single shot mode, you will see this response. $ ptpcam --set-property=0x5013 --val=0x0001 Camera: RICOH THETA V 'Still Capture Mode' is set to: 0x8005 (-32763) Changing property value to 0x0001 [(null)] succeeded.","title":"Set camera to live streaming mode"}]}